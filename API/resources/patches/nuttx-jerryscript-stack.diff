diff --git a/interpreters/jerryscript/jerry_main.c b/interpreters/jerryscript/jerry_main.c
index c644f5e..675b49e 100644
--- a/interpreters/jerryscript/jerry_main.c
+++ b/interpreters/jerryscript/jerry_main.c
@@ -39,6 +39,11 @@
 #define SYNTAX_ERROR_CONTEXT_SIZE 2
 
 /**
+ * Pattern for stack measurement.
+ */
+#define PATTERN (0xfe)
+
+/**
  * Print usage and available options
  */
 static void
@@ -291,15 +296,9 @@ register_js_function (const char *name_p, /**< name of the function */
 static jerry_log_level_t jerry_log_level = JERRY_LOG_LEVEL_ERROR;
 
 /**
- * Main program.
- *
- * @return 0 if success, error code otherwise
+ * JerryScript entry
  */
-#ifdef CONFIG_BUILD_KERNEL
-int main (int argc, FAR char *argv[])
-#else
-int jerry_main (int argc, char *argv[])
-#endif
+int jerry_entry(int argc, char *argv[])
 {
   if (argc > JERRY_MAX_COMMAND_LINE_ARGS)
   {
@@ -461,6 +460,64 @@ int jerry_main (int argc, char *argv[])
   jerry_cleanup ();
 
   return ret_code;
+}
+
+/**
+ * Main program.
+ *
+ * @return 0 if success, error code otherwise
+ */
+#ifdef CONFIG_BUILD_KERNEL
+int main (int argc, FAR char *argv[])
+#else
+int jerry_main (int argc, char *argv[])
+#endif
+{
+  FILE *fp;
+  char fname[32];
+  char stack_info[64];
+  long int size;
+  long int base;
+  long int stack_ptr;
+  size_t file_size;
+
+  /*
+   * Content of /proc/<pid>/stack:
+   * StackBase:  0x2001a368
+   * StackSize:  16364
+   */
+
+  sprintf(fname, "/proc/%d/stack", getpid());
+  fp = fopen(fname, "r");
+  if (!fp) {
+    return 1;
+  }
+
+  /* Extract stack info */
+  file_size = fread(stack_info, 1, 63, fp);
+  stack_info[file_size] = '\0';
+  fclose(fp);
+
+  sscanf(stack_info, "StackBase:  0x%x\nStackSize:  %d", &base, &size);
+  uint8_t *end = (uint8_t *)(base - size + 4);
+
+  /* Stack coloration */
+  __asm__("mov %0, sp" : "=r" (stack_ptr));
+  memset(end, PATTERN, stack_ptr - (long int)end);
+
+  /* Run Jerryscript */
+  int ret_code = jerry_entry(argc, argv);
+
+/* Check max stack usage */
+  uint8_t *stack_p = end;
+
+  while (*stack_p == PATTERN) {
+    stack_p++;
+  }
+
+  printf ("Stack usage: %d\n", (int) (base - (long int)stack_p));
+
+  return ret_code;
 } /* main */
 
 /**
